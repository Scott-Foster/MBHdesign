dim( volcano)
volcano <- rast( volcano, crs="EPSG:32759", type='xy')#+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)
plot( volcano)
crs( volcano)
q()
library( terra)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import the data and flip it so that latitudes index south to north
volcano <- datasets::volcano[nrow(datasets::volcano):1,]
#re-align the minimum altitude
volcano <- volcano - min( volcano)
#exaggerate altitude
volcano <- 50*volcano
#rescale for inclusion probabilities
#10 clusters of 5 sites
volcano <- 10*5*volcano / sum( volcano)
#cast to a raster
volExtent <- ext( 0.01*c(0,ncol(volcano), 0, nrow( volcano)))
volcano <- rast( volcano, type='xy')#+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)
volcano <- rast( volcano, crs="EPSG:32759", type='xy')#+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)
plot( volcano)
volcano <- rast( volcano, type='xy')#+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)library( terra)
library( terra)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import the data and flip it so that latitudes index south to north
volcano <- datasets::volcano[nrow(datasets::volcano):1,]
#re-align the minimum altitude
volcano <- volcano - min( volcano)
#exaggerate altitude
volcano <- 50*volcano
#rescale for inclusion probabilities
#10 clusters of 5 sites
volcano <- 10*5*volcano / sum( volcano)
#cast to a raster
volExtent <- ext( 0.01*c(0,ncol(volcano), 0, nrow( volcano)))
volcano <- rast( volcano, type='xy')#+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)
volcano
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
library( MBHdesign)
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
mtrace( quasiSamp.cluster)
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
mtrace( alterInclProbs.cluster)
mtrace( countFromRow)
countFromRow( 1, wtMat=wtMat, inclusion.probs=inclusion.probs.wrap)
skip( 2)
wtMat
inclusion.probs
qqq()
crs( volcano) <- "+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs"
plot( voclano)
plot( volcano)
volcano
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import the data and flip it so that latitudes index south to north
volcano <- datasets::volcano[nrow(datasets::volcano):1,]
#re-align the minimum altitude
volcano <- volcano - min( volcano)
#exaggerate altitude
volcano <- 50*volcano
#rescale for inclusion probabilities
#10 clusters of 5 sites
volcano <- 10*5*volcano / sum( volcano)
#cast to a raster
volExtent <- ext( 0.01*c(0,ncol(volcano), 0, nrow( volcano)))
volcano <- rast( volcano, type='xy', crs="+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)
volcano
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
go()
go()
qqq()
mtrace.off()
q()
library( terra)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import the data and flip it so that latitudes index south to north
volcano <- datasets::volcano[nrow(datasets::volcano):1,]
#re-align the minimum altitude
volcano <- volcano - min( volcano)
#exaggerate altitude
volcano <- 50*volcano
#rescale for inclusion probabilities
#10 clusters of 5 sites
volcano <- 10*5*volcano / sum( volcano)
#cast to a raster
volExtent <- ext( 0.01*c(0,ncol(volcano), 0, nrow( volcano)))
volcano <- rast( volcano, type='xy', crs="+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
library( MBHdesign)
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
plot( volcano)
#the sample points
points( samp[,c("x","y")], pch=20, cex=0.5)
#the centres of the clusters
#		(not sample points but potentially useful nevertheless)
points( attr( samp, "clusterDes")[,c("x","y")], pch=1, col='red', cex=0.5)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
#need raster functions
library( terra)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
plot(r)
plot(egDat)
values( egDat) <- values( egDat) - min( values( egDat))
plot( egDat)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
min( values( egDat), na.rm=TRUE)
values( egDat) - min( values( egDat), na.rm=TRUE)
values( egDat) - min( values( egDat), na.rm=FALSE)
values( egDat) <- values( egDat) - min( values( egDat), na.rm=TRUE)
plot( egDat)
#reproject to a UTM
egDat <- project( egDat, "+proj=utm +datum=WGS84 +units=km")
egDat
plot( egDat)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
values( egDat) <- values( egDat) - min( values( egDat), na.rm=TRUE)
egDat
#reproject to a UTM
egDat <- project( egDat, "+proj=utm +zone=31N +datum=WGS84 +units=km")
plot( egDat)
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = egDat, mc.cores=8)
library( MBHdesign)
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = egDat, mc.cores=8)
egDat
mtrace( quasiSamp.cluster)
tmp <- quasiSamp.raster(n = 500, inclusion.probs = egDat)
head( tmp)
points( tmp[,1:2])
tmp <- quasiSamp.raster(n = 1100, inclusion.probs = egDat)
plot( egDat)
points( tmp[,1:2], pch=20, cex=0.5)
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = egDat, mc.cores=1)
mtrace( alterInclProbs.cluster)
ext( inclusion.probs)
egDat
qqq()
mtrace.off()
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
mtrace( quasiSamp.cluster)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
mtrace( alterInclProbs.cluster)
inclusion.probs
countty
terra::rast( cbind( terra::crds(inclusion.probs), clusterSize*countty), type='xyz', crs=terra::crs( inclusion.probs))
ncells( inclusion.probs)
ncell( inclusion.probs)
length( countty)
dim( crds( inclusion.probs))
dim( crds( inclusion.probs, na.rm=FALSE))
IP.w <- inclusion.probs / terra::rast( cbind( terra::crds(inclusion.probs, na.rm=FALSE), clusterSize*countty), type='xyz', crs=terra::crs( inclusion.probs))
skip( 24)
kount
maxIter
crit
crit$max
tolerance
tmp <- stats::median( terra::values( inclusion.probs)[terra::values( inclusion.probs)>0], na.rm=TRUE)
tolerance <- 0.0001 * tmp
go(78)
inclusion.probs
IP.o
IP.w
tmp.bar
IP.o <- terra::rast( cbind( terra::crds( inclusion.probs, na.rm=FALSE), QandDeriv[,1]), type='xyz', crs=terra::crs(inclusion.probs))
tmp2 <- lapply( 1:nCluster, function(xx) quasiSamp.raster(n=clusterSize, inclusion.probs = tmpRast[[xx]]$IP.cond, randStartType=3, nSampsToConsider=nSampsToConsider[2], nStartsToConsider=nStartsToConsider[2]))
quasiSamp.raster(n=clusterSize, inclusion.probs = tmpRast[[1]]$IP.cond, randStartType=3, nSampsToConsider=nSampsToConsider[2], nStartsToConsider=nStartsToConsider[2])
quasiSamp.raster(n=clusterSize, inclusion.probs = tmpRast[[2]]$IP.cond, randStartType=3, nSampsToConsider=nSampsToConsider[2], nStartsToConsider=nStartsToConsider[2])
quasiSamp.raster(n=clusterSize, inclusion.probs = tmpRast[[3]]$IP.cond, randStartType=3, nSampsToConsider=nSampsToConsider[2], nStartsToConsider=nStartsToConsider[2])
quasiSamp.raster(n=clusterSize, inclusion.probs = tmpRast[[4]]$IP.cond, randStartType=3, nSampsToConsider=nSampsToConsider[2], nStartsToConsider=nStartsToConsider[2])
quasiSamp.raster(n=clusterSize, inclusion.probs = tmpRast[[5]]$IP.cond, randStartType=3, nSampsToConsider=nSampsToConsider[2], nStartsToConsider=nStartsToConsider[2])
tmpRast[[5]]
tmpRast
skip( 20)
tmp
head( tmp)
terra::rast( tmp[,c("x","y","cell","IP.s","IP.bar","IP.cond","IP.w")], type='xyz')
tmp[[1]]
tmp[[2]]
tmp[[3]]
tmpRast <- tapply( X=tmp, INDEX=tmp$ID, FUN=function(xx) print( xx))
tmpRast <- tapply( X=tmp, INDEX=tmp$ID, FUN=function(xx) print( dim( xx)))
tmp$ID
clusterDes
clusterIPs
tmp <- extractWithBuffer( ras=working.inclusion.probs, cellIDs=clusterIPs$cell, width=clusterRadius)
head( tmp)
tail( tmp)
mtrace( extractWithBuffer)
tmp <- extractWithBuffer( ras=working.inclusion.probs, cellIDs=clusterIPs$cell, width=clusterRadius)
ras
cellIDs
terra::as.points( ras)
terra::as.points( ras)[cellIDs,]
terra::as.points( ras)[1]
terra::as.points( ras)[1:2]
terra::as.points( ras)[1:20]
terra::as.points( ras)[1:200]
plot( terra::as.points( ras)[1:200], col='red', add=TRUE)
class( cellIDs)
plot( terra::as.points( ras)[c(10,40,200,500, 2000)], col='blue', add=TRUE)
plot( terra::as.points( ras)[c(10,40,200,500, 2000, cellIDs)], col='blue', add=TRUE)
cellIDs
pnts
terra::as.points( ras)
cellIDs
?as.points
terra::as.points( ras, na.rm=FALSE)
pnts <- terra::as.points( ras, na.rm=FALSE)[cellIDs]
plot( ras[[1]])
plot( pnts, add=T)
extry[[1]]
plot( extry[[1]])
head( extry)
qqq()
q()
#need raster functions
library( terra)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
values( egDat) <- values( egDat) - min( values( egDat), na.rm=TRUE)
#reproject to a UTM (zone taken from nominal long/lat)
egDat <- project( egDat, "+proj=utm +zone=31N +datum=WGS84 +units=km")
mtrace( quasiSamp.cluster)
library( MBHdesign)
mtrace( quasiSamp.cluster)
##re-align the minimum altitude
#volcano <- volcano - min( volcano)
##exaggerate altitude
#volcano <- 50*volcano
##rescale for inclusion probabilities
##10 clusters of 5 sites
#volcano <- 10*5*volcano / sum( volcano)
##cast to a raster
#volExtent <- ext( 0.01*c(0,ncol(volcano), 0, nrow( volcano)))
#volcano <- rast( volcano, type='xy', crs="+proj=utm +zone=59S +datum=WGS84 +units=km +no_defs +type=crs", extent=volExtent)
@
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
qqq()
#need raster functions
library( terra)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
values( egDat) <- values( egDat) - min( values( egDat), na.rm=TRUE)
#reproject to a UTM (zone taken from nominal long/lat)
egDat <- project( egDat, "+proj=utm +zone=31N +datum=WGS84 +units=km")
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=0.05,
inclusion.probs = volcano, mc.cores=1)
inclusion.probs
qqq()
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
class( egDat)
values( egDat) <- values( egDat) - min( values( egDat), na.rm=TRUE)
class( egDat)
#reproject to a UTM (zone taken from nominal long/lat)
egDat <- project( egDat, "+proj=utm +zone=31N +datum=WGS84 +units=km")
class( egDat)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
mc.cores <- 8
mtrace( alterInclProbs.cluster)
max( wtMat, na.rm=TRUE)
skip( 16)
go( 80)
length( tmpFiles)
length( tmp)
skip( 16)
mtrace( extractWithBuffer)
plot( ras)
plot( ras[[1]])
plot( pnts, add=TRUE)
pnts
plot( buffs, add=TRUE)
extry
head( extry)
tail( extry)
mtrace( extractWithBuffer, F)
tmp1[[1]]
length( tmpRast)
plot( tmpRast)
plot( tmpRast[[1]])
plot( tmpRast[[10]])
plot( tmpRast[[5]])
plot( tmpRast[[3]])
plot( tmpRast[[2]])
plot( tmpRast[[4]])
plot( tmpRast[[6]])
plot( tmpRast[[7]])
plot( tmpRast[[8]])
plot( tmpRast[[9])
plot( tmpRast[[9]])
mtrace.off()
#plot it over the volcano data
plot( egDat)
#the sample points
points( samp[,c("x","y")], pch=20, cex=0.5)
#the centres of the clusters
#		(not sample points but potentially useful nevertheless)
points( attr( samp, "clusterDes")[,c("x","y")], pch=1, col='red', cex=0.5)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=100, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
#need raster functions
library( terra)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 747)
#import example data
egDat <- rast( system.file("ex/elev.tif", package = "terra"))
values( egDat) <- values( egDat) - min( values( egDat), na.rm=TRUE)
#reproject to a UTM (zone taken from nominal long/lat)
egDat <- project( egDat, "+proj=utm +zone=31N +datum=WGS84 +units=km")
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=100, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
library( MBHdesign)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=100, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
#plot it over the volcano data
plot( egDat)
#the sample points
points( samp[,c("x","y")], pch=20, cex=0.5)
#the centres of the clusters
#		(not sample points but potentially useful nevertheless)
points( attr( samp, "clusterDes")[,c("x","y")], pch=1, col='red', cex=0.5)
?aggregate
egDat <- aggregate( egDat, fact=2)
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 190)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=100, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
#plot it over the volcano data
plot( egDat)
#the sample points
points( samp[,c("x","y")], pch=20, cex=0.5)
#the centres of the clusters
#		(not sample points but potentially useful nevertheless)
points( attr( samp, "clusterDes")[,c("x","y")], pch=1, col='red', cex=0.5)
mtrace( quasiSamp.cluster)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=8)
#plot it over the volcano data
plot( egDat)
#the sample points
points( samp[,c("x","y")], pch=20, cex=0.5)
#the centres of the clusters
#		(not sample points but potentially useful nevertheless)
points( attr( samp, "clusterDes")[,c("x","y")], pch=1, col='red', cex=0.5)
mtrace.off()
#I'm currently on a Embraer 190, so it *almost* seems appropriate
set.seed( 190)
#take the cluster sample
#increase mc.cores for faster processing
samp <- quasiSamp.cluster( nCluster=10, clusterSize=5, clusterRadius=5,
inclusion.probs = egDat, mc.cores=1)
#plot it over the volcano data
plot( egDat)
#the sample points
points( samp[,c("x","y")], pch=20, cex=0.5)
#the centres of the clusters
#		(not sample points but potentially useful nevertheless)
points( attr( samp, "clusterDes")[,c("x","y")], pch=1, col='red', cex=0.5)
#Create the working probabilties for the correct sized cluster.
workProbs <- alterInclProbs.cluster( nCluster=15, clusterSize=5, mc.cores=1,
clusterRadius=5, inclusion.probs=egDat)
#take the (over-sample)
overSamp <- quasiSamp.cluster( nCluster=15, clusterSize=10,
clusterRadius=5, working.inclusion.probs = workProbs)
#plot the results
par( mfrow=c(1,2))
plot( egDat, main="Planned and Spare points")
#the planned sample
points( overSamp[overSamp$cluster<=10 & overSamp$point<=5,c("x","y")], cex=0.5)
#the over-sample (within clusters 1:10)
points( overSamp[overSamp$cluster<=10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
plot( volcano, main="Over-sampled clusters")
plot( egDat, main="Over-sampled clusters")
#the overs-sampled clusters (themselves oversampled)
points( overSamp[overSamp$cluster>10 & overSamp$point<=5,c("x","y")], cex=0.5)
points( overSamp[overSamp$cluster>10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
#take the (over-sample)
overSamp <- quasiSamp.cluster( nCluster=15, clusterSize=10,
clusterRadius=5, working.inclusion.probs = workProbs)
#plot the results
par( mfrow=c(1,2))
plot( egDat, main="Planned and Spare points")
#the planned sample
points( overSamp[overSamp$cluster<=10 & overSamp$point<=5,c("x","y")], cex=0.5)
#the over-sample (within clusters 1:10)
points( overSamp[overSamp$cluster<=10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
plot( egDat, main="Over-sampled clusters")
#the overs-sampled clusters (themselves oversampled)
points( overSamp[overSamp$cluster>10 & overSamp$point<=5,c("x","y")], cex=0.5)
points( overSamp[overSamp$cluster>10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
#take the (over-sample)
overSamp <- quasiSamp.cluster( nCluster=15, clusterSize=10,
clusterRadius=5, working.inclusion.probs = workProbs)
#plot the results
par( mfrow=c(1,2))
plot( egDat, main="Planned and Spare points")
#the planned sample
points( overSamp[overSamp$cluster<=10 & overSamp$point<=5,c("x","y")], cex=0.5)
#the over-sample (within clusters 1:10)
points( overSamp[overSamp$cluster<=10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
plot( egDat, main="Over-sampled clusters")
#the overs-sampled clusters (themselves oversampled)
points( overSamp[overSamp$cluster>10 & overSamp$point<=5,c("x","y")], cex=0.5)
points( overSamp[overSamp$cluster>10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
#take the (over-sample)
set.seed( 190)
overSamp <- quasiSamp.cluster( nCluster=15, clusterSize=10,
clusterRadius=5, working.inclusion.probs = workProbs)
#plot the results
par( mfrow=c(1,2))
plot( egDat, main="Planned and Spare points")
#the planned sample
points( overSamp[overSamp$cluster<=10 & overSamp$point<=5,c("x","y")], cex=0.5)
#the over-sample (within clusters 1:10)
points( overSamp[overSamp$cluster<=10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
plot( egDat, main="Over-sampled clusters")
#the overs-sampled clusters (themselves oversampled)
points( overSamp[overSamp$cluster>10 & overSamp$point<=5,c("x","y")], cex=0.5)
#take the (over-sample)
set.seed( 727)
overSamp <- quasiSamp.cluster( nCluster=15, clusterSize=10,
clusterRadius=5, working.inclusion.probs = workProbs)
#plot the results
par( mfrow=c(1,2))
plot( egDat, main="Planned and Spare points")
#the planned sample
points( overSamp[overSamp$cluster<=10 & overSamp$point<=5,c("x","y")], cex=0.5)
#the over-sample (within clusters 1:10)
points( overSamp[overSamp$cluster<=10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
plot( egDat, main="Over-sampled clusters")
#the overs-sampled clusters (themselves oversampled)
points( overSamp[overSamp$cluster>10 & overSamp$point<=5,c("x","y")], cex=0.5)
points( overSamp[overSamp$cluster>10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
#take the (over-sample)
set.seed( 747)
overSamp <- quasiSamp.cluster( nCluster=15, clusterSize=10,
clusterRadius=5, working.inclusion.probs = workProbs)
#plot the results
par( mfrow=c(1,2))
plot( egDat, main="Planned and Spare points")
#the planned sample
points( overSamp[overSamp$cluster<=10 & overSamp$point<=5,c("x","y")], cex=0.5)
#the over-sample (within clusters 1:10)
points( overSamp[overSamp$cluster<=10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
plot( egDat, main="Over-sampled clusters")
#the overs-sampled clusters (themselves oversampled)
points( overSamp[overSamp$cluster>10 & overSamp$point<=5,c("x","y")], cex=0.5)
points( overSamp[overSamp$cluster>10 & overSamp$point>5,c("x","y")],
cex=0.5, col='red')
